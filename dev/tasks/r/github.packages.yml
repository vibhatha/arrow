# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

{% import 'macros.jinja' as macros with context %}

# This allows us to set a custom version via param:
# crossbow submit --param custom_version=8.5.3 r-binary-packages
# if the param is unset defaults to the usual Ymd naming scheme
{% set package_version = custom_version|default("\\2.\'\"$(date +%Y%m%d)\"\'") %}
# We need this as boolean and string
{% set is_upstream_b = arrow.github_repo == 'apache/arrow' %}
# use filter to cast to string and convert to lowercase to match yaml boolean
{% set is_fork = (not is_upstream_b)|lower %}
{% set is_upstream = is_upstream_b|lower %}


{{ macros.github_header() }}

jobs:
  source:
    # This job will change the version to either the custom_version param or YMD format.
    # The output allows other steps to use the exact version to prevent issues (e.g. date changes during run)
    name: Source Package
    runs-on: ubuntu-latest
    outputs:
      pkg_version: {{ '${{ steps.save-version.outputs.pkg_version }}' }}
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_change_r_pkg_version(is_fork, package_version)|indent }}
      - name: Save Version
        id: save-version
        shell: bash
        run: |
          echo "::set-output name=pkg_version::$(grep ^Version arrow/r/DESCRIPTION | sed s/Version:\ //)"

      - uses: r-lib/actions/setup-r@v2
        with:
          install-r: false

      - name: Build R source package
        shell: bash
        run: |
          cd arrow/r
          # Copy in the Arrow C++ source
          make sync-cpp
          R CMD build --no-build-vignettes .

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-pkg__src__contrib
          path: arrow/r/arrow_*.tar.gz

  linux-cpp:
    name: C++ Binary {{ '${{ matrix.config.os }}-${{ matrix.config.version }}' }}
    runs-on: ubuntu-latest
    needs: source
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu, version: "18.04" }
          - { os: ubuntu, version: "22.04" }
          - { os: centos, version: "7" }
    env:
      UBUNTU: {{ '${{ matrix.config.version }}' }}
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_change_r_pkg_version(is_fork, '${{ needs.source.outputs.pkg_version }}')|indent }}
      {{ macros.github_install_archery()|indent }}
      - name: Build libarrow
        shell: bash
        env:
          UBUNTU: {{ '${{ matrix.config.version}}' }}
        run: |
          sudo sysctl -w kernel.core_pattern="core.%e.%p"
          ulimit -c unlimited
          archery docker run  {{ '${{ matrix.config.os}}' }}-cpp-static
      - name: Bundle libarrow
        shell: bash
        env:
          PKG_FILE: arrow-{{ '${{ needs.source.outputs.pkg_version }}' }}.zip
          VERSION: {{ '${{ needs.source.outputs.pkg_version }}' }}
        run: |
          cd arrow/r/libarrow/dist
          # These files were created by the docker user so we have to sudo to get them
          sudo -E zip -r $PKG_FILE lib/ include/

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-lib__libarrow__bin__{{ '${{ matrix.config.os}}-${{ matrix.config.version}}' }}
          path: arrow/r/libarrow/dist/arrow-*.zip

  windows-cpp:
    name: C++ Binary Windows RTools (40 only)
    needs: source
    runs-on: windows-latest
    steps:
      - run: git config --global core.autocrlf false
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_change_r_pkg_version(is_fork, '${{ needs.source.outputs.pkg_version }}')|indent }}

      - uses: r-lib/actions/setup-r@v2
        with:
          rtools-version: 40
          r-version: "4.0"
          Ncpus: 2

      - name: Build Arrow C++ with rtools40
        shell: bash
        env:
          ARROW_HOME: "arrow"
        run: arrow/ci/scripts/r_windows_build.sh

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-lib__libarrow__bin__windows
          path: build/arrow-*.zip

  r-packages:
    needs: [source, windows-cpp]
    name: {{ '${{ matrix.platform }} ${{ matrix.r_version.r }}' }}
    runs-on: {{ '${{ matrix.platform }}' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - windows-latest
          # This is newer than what CRAN builds on, but Travis is no longer an option for us, so...
          - macos-10.15
          # - devops-managed # No M1 until the runner application runs native
        r_version:
          - { rtools: 40, r: "4.1" }
          - { rtools: 42, r: "4.2" }
    steps:
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: {{ '${{ matrix.r_version.r }}' }}
          rtools-version: {{ '${{ matrix.r_version.rtools }}' }}
          Ncpus: 2
      {{ macros.github_setup_local_r_repo(false, true)|indent }}
      - name: Build Binary
        id: build
        shell: Rscript {0}
        env:
          ARROW_R_DEV: TRUE
        run: |
          on_windows <- tolower(Sys.info()[["sysname"]]) == "windows"

          # Install dependencies by installing (yesterday's) binary, then removing it
          install.packages(c("arrow", "cpp11"),
            type = "binary",
            repos = c("https://nightlies.apache.org/arrow/r", "https://cloud.r-project.org")
          )

          cat("Remove old arrow version.\n")
          remove.packages("arrow")

          # Build
          Sys.setenv(MAKEFLAGS = paste0("-j", parallel::detectCores()))
          INSTALL_opts <- "--build"
          if (!on_windows) {
            # Windows doesn't support the --strip arg
            INSTALL_opts <- c(INSTALL_opts, "--strip")
          }

          cat("Install arrow from dev repo.\n")
          install.packages(
            "arrow",
            type = "source",
            # The sub is necessary to prevent an error on windows.
            repos = sub("file://", "file:", getOption("arrow.dev_repo")),,
            INSTALL_opts = INSTALL_opts
          )

          # Test
          library(arrow)
          read_parquet(system.file("v0.7.1.parquet", package = "arrow"))

          # encode contrib.url for artifact name
          cmd <- paste0(
            "::set-output name=path::",
            gsub(
              "/", "__",
              contrib.url("", type = "binary")
            ),
            "\n"
          )
          cat(cmd)

      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: r-pkg{{ '${{ steps.build.outputs.path }}' }}
          path: arrow_*

  test-linux-binary:
    needs: [source, linux-cpp]
    name: Test binary {{ '${{ matrix.image }}' }}
    runs-on: ubuntu-latest
    container: {{ '${{ matrix.image }}' }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - "rhub/ubuntu-gcc-release" # ubuntu-20.04 (focal)
          - "rstudio/r-base:4.1-bionic"
          - "rstudio/r-base:4.2-centos7"
          - "rocker/r-ver:3.6.3" # for debian:buster (10)
          - "rocker/r-ver" # ubuntu-20.04
          - "rhub/fedora-clang-devel" # tests distro-map.csv, mapped to ubuntu-18.04
          - "rocker/r-ubuntu:22.04" # tests openssl3 compatibility
    steps:
      - name: Install system requirements
        shell: bash
        run: |
          if [ "`which dnf`" ]; then
            dnf install -y libcurl-devel openssl-devel
          elif [ "`which yum`" ]; then
            yum install -y libcurl-devel openssl-devel
          elif [ "`which zypper`" ]; then
            zypper install -y libcurl-devel libopenssl-devel
          else
            apt-get update
            apt-get install -y libcurl4-openssl-dev libssl-dev
          fi

          # Add R-devel to PATH
          echo "/opt/R-devel/bin" >> $GITHUB_PATH

      {{ macros.github_setup_local_r_repo(true, false)|indent }}
      - name: Install arrow from our repo
        env:
          ARROW_R_DEV: TRUE
          LIBARROW_BUILD: "FALSE"
          LIBARROW_BINARY: "TRUE"
        shell: Rscript {0}
        run: |
          {{  macros.github_test_r_src_pkg()|indent(8) }}

  test-source:
    needs: source
    name: Test linux source build
    runs-on: ubuntu-latest
    steps:
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          install-r: false
      {{ macros.github_setup_local_r_repo(false, false)|indent }}
      - name: Install arrow from nightly repo
        env:
          # Test source build so be sure not to download a binary
          LIBARROW_BINARY: "FALSE"
        shell: Rscript {0}
        run: |
          {{ macros.github_test_r_src_pkg()|indent(8) }}

      - name: Retry with verbosity if that failed
        if: failure()
        env:
          LIBARROW_BINARY: "FALSE"
          ARROW_R_DEV: "TRUE"
        run: |
          {{ macros.github_test_r_src_pkg()|indent(8) }}

  upload-binaries:
    # Only upload binaries if all tests pass.
    needs: [ r-packages, test-source, test-linux-binary]
    name: Upload artifacts
    runs-on: ubuntu-latest
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Install R
        uses: r-lib/actions/setup-r@v2
        with:
          install-r: false
      - name: Rename artifacts
        shell: Rscript {0}
        run: |
          file_paths <- list.files("artifacts", include.dirs = FALSE, recursive = TRUE)
          new_names <- file.path("binaries", sub("/", "__", file_paths))
          dir.create("binaries", showWarnings = FALSE)
          file.copy(file.path("artifacts", file_paths), new_names)

      {{ macros.github_upload_releases("binaries/r-*")|indent }}
